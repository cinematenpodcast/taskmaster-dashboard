{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Setup and Repository Initialization",
        "description": "Set up the monorepo structure for the project, including separate directories for the backend (Node.js) and frontend (React). Initialize Git, configure package managers (npm/yarn/pnpm), and set up basic build tools.",
        "priority": "high",
        "dependencies": [],
        "status": "done"
      },
      {
        "id": 2,
        "title": "Backend: Implement File Monitoring and JSON Parsing",
        "description": "Develop the backend service responsible for monitoring the specified tasks.json file for changes and parsing its content.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done"
      },
      {
        "id": 3,
        "title": "Backend: Implement Real-time WebSocket Server",
        "description": "Set up a WebSocket server in the backend to push real-time updates to the frontend whenever the tasks.json file changes.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done"
      },
      {
        "id": 4,
        "title": "Create Remote Repository and Push Initial Codebase",
        "description": "Create a new GitHub repository for the project and push the initial project structure, including the backend with real-time updates and the frontend setup.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done"
      },
      {
        "id": 5,
        "title": "Frontend: Setup State Management and Real-time Connection",
        "description": "Set up the frontend application structure, including routing, state management (Redux Toolkit), and integrate the WebSocket client to receive real-time updates from the backend.",
        "priority": "high",
        "dependencies": [
          1,
          3
        ],
        "status": "done"
      },
      {
        "id": 6,
        "title": "Frontend: Implement Data Processing and Metrics Calculation",
        "description": "Implement the logic in the frontend to process the raw task data received from the backend, calculate metrics, and prepare data for different visualizations.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done"
      },
      {
        "id": 7,
        "title": "Frontend: Build Kanban Board View",
        "description": "Build the Kanban board view component to display tasks organized by their status (Pending, In Progress, Completed, Cancelled) using color-coded indicators.",
        "priority": "high",
        "dependencies": [
          6
        ],
        "status": "done"
      },
      {
        "id": 8,
        "title": "Test Kanban Board View Implementation",
        "description": "Test the Kanban Board View by running the `playwright-debug.js` script. This will capture a screenshot and browser console output. A successful test is a correct screenshot with no console errors.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "done"
      },
      {
        "id": 9,
        "title": "Commit Kanban Board View and Tests",
        "description": "Commit the completed implementation and tests for the Kanban Board View to the local Git repository.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "done"
      },
      {
        "id": 10,
        "title": "Frontend: Build Dashboard Overview View",
        "description": "Build the Dashboard Overview view component to display project metrics and statistics using cards and charts.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "done"
      },
      {
        "id": 11,
        "title": "Test Dashboard Overview View Implementation",
        "description": "Test the Dashboard Overview View by running the `playwright-debug.js` script. This will capture a screenshot and browser console output. A successful test is a correct screenshot with no console errors.",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "status": "done"
      },
      {
        "id": 12,
        "title": "Commit Dashboard Overview View and Tests",
        "description": "Commit the completed implementation and tests for the Dashboard Overview View to the local Git repository.",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "status": "done"
      },
      {
        "id": 13,
        "title": "Frontend: Implement Interactive Task Details Modal",
        "description": "Implement the interactive task details modal/popup that appears when a task card is clicked, showing full task information and related tasks.",
        "priority": "high",
        "dependencies": [
          9,
          12
        ],
        "status": "done"
      },
      {
        "id": 14,
        "title": "Test Interactive Task Details Modal Implementation",
        "description": "Test the Interactive Task Details Modal by running the `playwright-debug.js` script. This will capture a screenshot and browser console output. A successful test is a correct screenshot with no console errors.",
        "priority": "medium",
        "dependencies": [
          13
        ],
        "status": "done"
      },
      {
        "id": 15,
        "title": "Commit Interactive Task Details Modal and Tests",
        "description": "Commit the completed implementation and tests for the Interactive Task Details Modal component to the local Git repository.",
        "priority": "medium",
        "dependencies": [
          14
        ],
        "status": "done"
      },
      {
        "id": 16,
        "title": "Frontend: Implement Dependency Visualization",
        "description": "Implement a visualization component to display dependency relationships between tasks, highlighting blocked tasks.",
        "priority": "medium",
        "dependencies": [
          6,
          15
        ],
        "status": "done"
      },
      {
        "id": 17,
        "title": "Test Dependency Visualization Implementation",
        "description": "Test the Dependency Visualization by running the `playwright-debug.js` script. This will capture a screenshot and browser console output. A successful test is a correct screenshot with no console errors.",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "status": "done"
      },
      {
        "id": 18,
        "title": "Commit Dependency Visualization and Tests",
        "description": "Commit the completed implementation and tests for the Dependency Visualization to the local Git repository.",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "status": "done"
      },
      {
        "id": 19,
        "title": "Frontend: Implement Responsive Design and Performance Optimizations",
        "description": "Ensure the entire dashboard application is fully responsive across desktop, tablet, and mobile screen sizes and optimize performance.",
        "priority": "medium",
        "dependencies": [
          9,
          12,
          15,
          18
        ],
        "status": "done"
      },
      {
        "id": 20,
        "title": "Test Responsive Design and Performance Optimizations",
        "description": "Test the responsive design and performance by running the `playwright-debug.js` script. This will capture a screenshot and browser console output. A successful test is a correct screenshot with no console errors.",
        "priority": "medium",
        "dependencies": [
          19
        ],
        "status": "done"
      },
      {
        "id": 21,
        "title": "Commit Responsive Design and Optimizations",
        "description": "Commit the completed responsive design implementations, performance optimizations, and their corresponding tests to the repository.",
        "priority": "medium",
        "dependencies": [
          20
        ],
        "status": "done"
      },
      {
        "id": 22,
        "title": "Backend: Allow tasks.json path via CLI argument",
        "description": "Modify the backend service to accept the path to the tasks.json file as a command-line argument.",
        "details": "Implement command-line argument parsing in the backend entry point (e.g., server.js). Use a library like `yargs` or Node.js's built-in `process.argv` to define and parse an argument (e.g., `--tasks-path` or `-f`) that specifies the location of the tasks.json file. The backend should use this provided path for file monitoring (Task 2) and JSON parsing. If the argument is not provided, the backend should default to the current behavior (e.g., using `./tasks.json`). Ensure robust error handling for invalid or non-existent paths provided via the argument, logging appropriate messages and potentially falling back to the default path or exiting gracefully. Update the file watching and parsing logic to dynamically use the path obtained from the arguments.",
        "testStrategy": "Run the backend server from the command line. Test without the argument to confirm it loads the default tasks.json. Create a test tasks.json file in a non-default location. Run the backend with the command-line argument specifying the path to the test file (e.g., `node server.js --tasks-path /path/to/test/tasks.json`). Verify that the backend successfully loads and parses the content of the specified file. Modify the test file while the server is running and confirm via a WebSocket client or logs that the backend detects changes and processes the correct file. Test with an invalid path to ensure error handling is correct.",
        "status": "done",
        "dependencies": [
          2,
          3
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Frontend: Refactor UI Layout to Full-Width",
        "description": "Refactor the main application layout to be full-width and improve overall cleanliness and consistency of UI elements.",
        "details": "This task involves modifying the main application container and layout components. The goal is to remove any fixed-width constraints, allowing the content to span the full width of the viewport (minus appropriate padding/margins). Review existing components (Kanban, Dashboard, Dependency Viz, Modals) to ensure they adapt correctly to the new layout. Pay attention to spacing, alignment, and consistency across different views. Consider using CSS Grid or Flexbox for the main layout structure. Ensure responsiveness is maintained or improved as part of this refactoring, building upon the work done in Task 19. Clean up any unused CSS or layout-related code.",
        "testStrategy": "Manually test all main views (Dashboard, Kanban, Dependency Visualization) to ensure they render correctly and utilize the full width. Verify responsiveness by resizing the browser window and checking on different devices/simulators. Check for consistent spacing and alignment of elements across views. Use browser developer tools to inspect layout properties and ensure fixed-width constraints have been removed. Confirm no visual regressions were introduced in existing components.",
        "status": "done",
        "dependencies": [
          5,
          6,
          7,
          10,
          16,
          19
        ],
        "priority": "medium",
        "subtasks": []
      }
    ],
    "metadata": {
      "projectName": "Taskmaster_dashboard",
      "projectDescription": "A modern, responsive web dashboard that automatically monitors tasks.json files and provides real-time visual updates of project status.",
      "projectVersion": "0.1.0",
      "author": "Yorrick Schoonheydt",
      "creationDate": "2025-07-09T13:42:37.765Z",
      "lastUpdated": "2025-07-09T13:48:30.354Z",
      "created": "2025-07-09T14:05:00.069Z",
      "description": "Tasks for master context",
      "updated": "2025-07-10T06:57:46.267Z"
    }
  }
}